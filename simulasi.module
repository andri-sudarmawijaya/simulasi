<?php

/**
 * @file
 * Contains simulasi.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\simulasi\Lorem;
/**
 * Implements hook_help().
 */
function simulasi_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the simulasi module.
    case 'help.page.simulasi':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Simulasi Pendaftaran PPDB') . '</p>';
      return $output;

    default:
  }
}


/**
 * Batch operation for batch 2: five at a time.
 *
 * This is the function that is called on each operation in batch 2.
 *
 * After each group of 5 control is returned to the batch API for later
 * continuation.
 */
function simulasi_op_2($operation_details, &$context) {
  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = [];
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;

    // Save node count for the termination message.
    $context['sandbox']['max'] = 10;
  }
  // Process in groups of 5 (arbitrary value).
  // When a group of five is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  // That way even though we're already processing at the operation level
  // the operation itself is interruptible.
  $limit = 5;

    
  // Retrieve the next group.
  $result = range($context['sandbox']['current_node'] + 1, $context['sandbox']['current_node'] + 1 + $limit);

  foreach ($result as $row) {
    // Here we actually perform our dummy 'processing' on the current node.
    usleep(20000);
    
	$data = _insert_data();

	// Store some results for post-processing in the 'finished' callback.
    // The contents of 'results' will be available as $results in the
    // 'finished' function (in this example, simulasi_finished()).
    $context['results'][] = $row . ' ' . $operation_details;
    
    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row;
    $context['message'] = t('Running Batch "@id" @details',
      ['@id' => $row, '@details' => $operation_details]
    );
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = ($context['sandbox']['progress'] >= $context['sandbox']['max']);
  }
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function simulasi_finished($success, $results, $operations) {
  $messenger = \Drupal::messenger();
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $messenger->addMessage(t('@count results processed.', ['@count' => count($results)]));
    $messenger->addMessage(t('The final result was "%final"', ['%final' => end($results)]));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $messenger->addMessage(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}


function _insert_data(){
  
  $entry = [
      'nisn' => rand(11111111111111, 99999999999999),
      'uid' => '1',
      'nama_lengkap' => Lorem::ipsum('2', '2'),
      'nama_ayah' => Lorem::ipsum('2', '2'),
      'pekerjaan_ayah' => Lorem::ipsum('2', '3'),
      'tempat_lahir' => Lorem::ipsum('1', '1'),
      'tgl_lahir' => makeRandomDateInclusive('1999-01-01', '2001-05-30'),
      'matematika' => mt_rand(300,990) / 10,
      'ipa' => mt_rand(400,990) / 10,
      'ips' => mt_rand(530,990) / 10,
      'english' => mt_rand(330,990) / 10,
      'indonesia' => mt_rand(430,990) / 10,
    ];

	$database = \Drupal::database();
	$transaction = $database->startTransaction();
	try {
	  $database->insert('data_akademik')->fields($entry)->execute();
	  //$this->messenger()->addMessage($this->t('Selamat data anda sudah disimpan.'));
	}
	catch (\Exception $e) {
	  $transaction->rollback();
	  $pendaftaran = NULL;
	  watchdog_exception('pendaftaran', $e, $e->getMessage());
	  throw new \Exception(  $e->getMessage(), $e->getCode(), $e->getPrevious());
	}
}

function makeRandomDateInclusive($startDate,$endDate){
    $days = round((strtotime($endDate) - strtotime($startDate)) / (60 * 60 * 24));
    $n = rand(0,$days);
    return date("Y-m-d",strtotime("$startDate + $n days"));    
}